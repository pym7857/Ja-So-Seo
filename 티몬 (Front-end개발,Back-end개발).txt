■개발과 관련하여, 자신이 스스로 해결한 가장 어려운 기술적인 문제에 대해서 1400자 이내로 기술하고, 기술한 내용과 관련된 소스코드를 40 줄 이내의 Text 파일로 작성하여 첨부하세요. (소스 코드 작성시 개발언어의 제한은 없으며, 아래 첨부 파일 제출 메뉴를 이용하세요. 제출 필수입니다.) *

"자율주행 RC Car, 라즈베리파이 화면 delay 개선"
4학년 1학기 종합설계 프로젝트로 자율 주행 RC Car를 제작했던 경험이 있습니다.
당시, 라즈베리파이를 CPU로 사용했었고, 영상을 제어하고 방향등을 판단해 HW에 명령어를 보내는 서버 컴퓨터로 작업을 진행하였습니다. 

라떼판다가 아닌 라즈베리파이로 작업을 진행하였기에 실제 picam과 서버에 전송되는 화면 사이의 심각한 delay가 발생했었습니다. 

"해결책 1: multi-thread frame buffer 적용"
이러한 화면 delay를 개선하기 위해, 먼저, multi-thread frame buffer 기법을 이용해 영상의 frame들을 multi-thread buffer에 담아 전송하는 방식을 적용했었습니다. 이 방법을 도입하기로 결정한 이유는, 라즈베리파이를 cpu로 사용했었기에, 한번에 들어오는 frame들의 양이 너무 많아 부하가 생겨 delay가 생긴다고 추측했었기 때문이었습니다. 이 방법을 도입한 결과, 실제 총 52% 정도의 화면 delay 개선율을 보였지만, 완벽하게 화면 delay가 개선되지는 않았었습니다.

"해결책 2: 소켓 프로그래밍 기법 적용"
다른 여러 해결책등을 찾던 도중, 저번 학기 수업시간에 배웠었던 "소켓 프로그래밍 기법"을 적용 해보았습니다. 가장 먼저, 동영상을 하나의 이미지 단위로 쪼갠 후, 해당 frame들을 buffer에 담는 방식을 적용하였습니다. 이후, 하나의 서버를 송신부와 수신부 서버를 나눠서 각기 운용하였습니다. 소켓 통신은 어떠한 연결을 받아들일지에 대해 미리 지정을 해주어야 했기에, 각각의 host주소와 port주소를 미리 설정해주었습니다. 

이러한 소켓프로그래밍 기법을 적용시킨 결과, picam과 서버사이에 화면 delay를 완벽하게 제거할 수 있었습니다. 

평소 웹개발 쪽에 치중해 개발을 진행해왔었지만, 다양한 SW분야의 역량을 키우기 위해 진행했었던 자율주행 RC Car 프로젝트 였습니다. 이 프로젝트를 통해, 평소 이론으로만 알고 있었던 "소켓프로그래밍" 기법에 대해 조금 더 깊이있게 이해할 수 있었습니다.